{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "ApiSMS Gateway DPCR",
		"description": "Collection compl√®te pour tester l'API SMS Gateway DPCR avec Kannel\n\n## Configuration requise:\n\n1. **Variables de collection:**\n   - `base_url`: URL de base de l'API (ex: https://sms-gateway.dj/api/v1)\n   - `api_key`: Votre cl√© API (sk_xxxxxxxx)\n   - `test_phone`: Num√©ro de test (77166677)\n   - `from_number`: Exp√©diteur par d√©faut (11123)\n\n2. **Tests automatis√©s:**\n   - Validation des codes de r√©ponse\n   - Extraction et sauvegarde des IDs SMS\n   - V√©rification des formats de r√©ponse\n   - Tests de performance\n\n## Utilisation:\n\n1. Configurer les variables d'environnement\n2. Ex√©cuter \"Health Check\" pour v√©rifier la connectivit√©\n3. Tester \"Send SMS\" puis \"Get SMS Status\"\n4. Utiliser \"Run Collection\" pour tests automatis√©s complets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üè• Health & Connectivity",
			"item": [
				{
					"name": "System Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"System is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"healthy\");",
									"});",
									"",
									"pm.test(\"All health checks passed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.checks).to.have.property('database');",
									"    pm.expect(jsonData.checks).to.have.property('redis');",
									"    pm.expect(jsonData.checks).to.have.property('kannel');",
									"    pm.expect(jsonData.checks.database.status).to.eql(\"ok\");",
									"    pm.expect(jsonData.checks.redis.status).to.eql(\"ok\");",
									"    pm.expect(jsonData.checks.kannel.status).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/../../health?token={{health_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"..",
								"..",
								"health"
							],
							"query": [
								{
									"key": "token",
									"value": "{{health_token}}"
								}
							]
						},
						"description": "V√©rification de l'√©tat de sant√© du syst√®me complet"
					}
				},
				{
					"name": "API Documentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Documentation accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains HTML\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/../../api/documentation",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"..",
								"..",
								"api",
								"documentation"
							]
						},
						"description": "Acc√®s √† la documentation Swagger/OpenAPI"
					}
				}
			],
			"description": "Tests de connectivit√© et v√©rification de l'√©tat du syst√®me"
		},
		{
			"name": "üì§ SMS Sending",
			"item": [
				{
					"name": "Send SMS - Synchronous",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"SMS data structure is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('from');",
									"    pm.expect(jsonData.data).to.have.property('to');",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"    pm.expect(jsonData.data.direction).to.eql('outbound');",
									"});",
									"",
									"pm.test(\"SMS status is sent or delivered\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(['sent', 'delivered']).to.include(jsonData.data.status);",
									"});",
									"",
									"// Save SMS ID for subsequent tests",
									"pm.test(\"Save SMS ID for later tests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"last_sms_id\", jsonData.data.id);",
									"    pm.collectionVariables.set(\"last_sms_status\", jsonData.data.status);",
									"    console.log(\"SMS ID saved: \" + jsonData.data.id);",
									"});",
									"",
									"pm.test(\"Phone number format is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.to).to.match(/^\\+253\\d{8}$/);",
									"    pm.expect(jsonData.data.from).to.match(/^\\+253.+$/);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique message for testing",
									"const timestamp = new Date().toISOString();",
									"pm.collectionVariables.set(\"test_message\", `Test SMS envoy√© le ${timestamp} depuis Postman`);",
									"",
									"console.log(\"Test message: \" + pm.collectionVariables.get(\"test_message\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"{{test_message}}\",\n    \"from\": \"{{from_number}}\",\n    \"async\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Envoi d'un SMS en mode synchrone avec tests automatiques"
					}
				},
				{
					"name": "Send SMS - Asynchronous",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response indicates async processing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.async).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('queued');",
									"});",
									"",
									"pm.test(\"SMS data structure is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('sms');",
									"    pm.expect(jsonData.sms).to.have.property('id');",
									"    pm.expect(jsonData.sms).to.have.property('status');",
									"    pm.expect(jsonData.sms.status).to.eql('pending');",
									"});",
									"",
									"// Save async SMS ID",
									"pm.test(\"Save async SMS ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"async_sms_id\", jsonData.sms.id);",
									"    console.log(\"Async SMS ID saved: \" + jsonData.sms.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"SMS asynchrone depuis Postman - {{$timestamp}}\",\n    \"from\": \"{{from_number}}\",\n    \"async\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Envoi d'un SMS en mode asynchrone (via queue)"
					}
				},
				{
					"name": "Send SMS - With Custom Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 202\", function () {",
									"    pm.expect([200, 202]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Custom sender is preserved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var smsData = jsonData.data || jsonData.sms;",
									"    pm.expect(smsData.from).to.include('DPCR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"Alerte DPCR: V√©hicule #12345 n√©cessite une maintenance urgente\",\n    \"from\": \"DPCR\",\n    \"async\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Envoi SMS avec exp√©diteur personnalis√© (texte alphanumerique)"
					}
				}
			],
			"description": "Tests d'envoi de SMS en modes synchrone et asynchrone"
		},
		{
			"name": "üìä SMS Status & Tracking",
			"item": [
				{
					"name": "Get SMS Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"SMS status response structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('created_at');",
									"});",
									"",
									"pm.test(\"SMS ID matches sent SMS\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedId = pm.collectionVariables.get(\"last_sms_id\");",
									"    pm.expect(jsonData.data.id.toString()).to.eql(expectedId.toString());",
									"});",
									"",
									"pm.test(\"SMS status is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(['pending', 'sent', 'delivered', 'failed']).to.include(jsonData.data.status);",
									"});",
									"",
									"pm.test(\"Timestamps are present and valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    pm.expect(jsonData.data.updated_at).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if we have a SMS ID to test with",
									"const smsId = pm.collectionVariables.get(\"last_sms_id\");",
									"if (!smsId) {",
									"    console.log(\"No SMS ID found. Please run 'Send SMS' first.\");",
									"} else {",
									"    console.log(\"Testing status for SMS ID: \" + smsId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/{{last_sms_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"{{last_sms_id}}",
								"status"
							]
						},
						"description": "R√©cup√©ration du statut d'un SMS sp√©cifique"
					}
				},
				{
					"name": "Get SMS Status - Async",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Async SMS status tracking\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id.toString()).to.eql(pm.collectionVariables.get(\"async_sms_id\").toString());",
									"    ",
									"    // Status should have progressed from 'pending'",
									"    pm.expect(['pending', 'sent', 'delivered', 'failed']).to.include(jsonData.data.status);",
									"    console.log(\"Async SMS status: \" + jsonData.data.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/{{async_sms_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"{{async_sms_id}}",
								"status"
							]
						},
						"description": "V√©rification du statut d'un SMS envoy√© en mode asynchrone"
					}
				},
				{
					"name": "Get SMS Status - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is appropriate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/999999/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"999999",
								"status"
							]
						},
						"description": "Test de gestion d'erreur pour SMS inexistant"
					}
				}
			],
			"description": "Tests de suivi et r√©cup√©ration du statut des SMS"
		},
		{
			"name": "üìã SMS Listing",
			"item": [
				{
					"name": "List SMS - All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('links');",
									"    pm.expect(jsonData).to.have.property('meta');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Pagination metadata is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta).to.have.property('current_page');",
									"    pm.expect(jsonData.meta).to.have.property('per_page');",
									"    pm.expect(jsonData.meta).to.have.property('total');",
									"    pm.expect(jsonData.meta.current_page).to.eql(1);",
									"    pm.expect(jsonData.meta.per_page).to.eql(20);",
									"});",
									"",
									"pm.test(\"SMS items have correct structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        var firstSms = jsonData.data[0];",
									"        pm.expect(firstSms).to.have.property('id');",
									"        pm.expect(firstSms).to.have.property('direction');",
									"        pm.expect(firstSms).to.have.property('status');",
									"        pm.expect(firstSms).to.have.property('created_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms?page=1&per_page=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "20"
								}
							]
						},
						"description": "Liste pagin√©e de tous les SMS"
					}
				},
				{
					"name": "List SMS - Delivered Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All SMS have delivered status\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.forEach(function(sms) {",
									"        pm.expect(sms.status).to.eql('delivered');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms?status=delivered&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms"
							],
							"query": [
								{
									"key": "status",
									"value": "delivered"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						},
						"description": "Liste des SMS livr√©s avec succ√®s"
					}
				},
				{
					"name": "List SMS - Outbound Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All SMS are outbound\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.forEach(function(sms) {",
									"        pm.expect(sms.direction).to.eql('outbound');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms?direction=outbound",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms"
							],
							"query": [
								{
									"key": "direction",
									"value": "outbound"
								}
							]
						},
						"description": "Liste des SMS sortants uniquement"
					}
				}
			],
			"description": "Tests de listage et pagination des SMS"
		},
		{
			"name": "üìà Statistics",
			"item": [
				{
					"name": "Get Monthly Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats structure is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('client');",
									"    pm.expect(jsonData).to.have.property('period');",
									"    pm.expect(jsonData).to.have.property('totals');",
									"    pm.expect(jsonData).to.have.property('success_rate');",
									"});",
									"",
									"pm.test(\"Period is monthly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.period.name).to.eql('month');",
									"});",
									"",
									"pm.test(\"Client info is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.client).to.have.property('id');",
									"    pm.expect(jsonData.client).to.have.property('name');",
									"    pm.expect(jsonData.client).to.have.property('active');",
									"    pm.expect(jsonData.client.active).to.eql(true);",
									"});",
									"",
									"pm.test(\"Totals have all required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.totals).to.have.property('sent');",
									"    pm.expect(jsonData.totals).to.have.property('delivered');",
									"    pm.expect(jsonData.totals).to.have.property('failed');",
									"    pm.expect(jsonData.totals).to.have.property('pending');",
									"    pm.expect(jsonData.totals).to.have.property('total');",
									"});",
									"",
									"pm.test(\"Success rate is reasonable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success_rate).to.be.at.least(0);",
									"    pm.expect(jsonData.success_rate).to.be.at.most(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/stats?period=month",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								}
							]
						},
						"description": "Statistiques mensuelles d√©taill√©es"
					}
				},
				{
					"name": "Get Weekly Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Period is weekly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.period.name).to.eql('week');",
									"});",
									"",
									"pm.test(\"Daily breakdown exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('daily');",
									"    pm.expect(jsonData.daily).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/stats?period=week",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "period",
									"value": "week"
								}
							]
						},
						"description": "Statistiques hebdomadaires avec d√©tail quotidien"
					}
				},
				{
					"name": "Get Realtime Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Realtime stats structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('last_24_hours');",
									"    pm.expect(jsonData).to.have.property('kannel_status');",
									"    pm.expect(jsonData).to.have.property('current_time');",
									"});",
									"",
									"pm.test(\"24h stats have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.last_24_hours).to.have.property('sent');",
									"    pm.expect(jsonData.last_24_hours).to.have.property('failed');",
									"    pm.expect(jsonData.last_24_hours).to.have.property('pending');",
									"});",
									"",
									"pm.test(\"Kannel status is included\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kannel_status).to.have.property('status');",
									"    pm.expect(['connected', 'disconnected', 'error']).to.include(jsonData.kannel_status.status);",
									"});",
									"",
									"pm.test(\"Current time is recent\", function () {",
									"    var jsonData = pm.response.json();",
									"    var currentTime = new Date(jsonData.current_time);",
									"    var now = new Date();",
									"    var diffMinutes = Math.abs(now - currentTime) / (1000 * 60);",
									"    pm.expect(diffMinutes).to.be.below(5); // Within 5 minutes",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/stats/realtime",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats",
								"realtime"
							]
						},
						"description": "Statistiques temps r√©el (derni√®res 24h)"
					}
				}
			],
			"description": "Tests des statistiques et analytics"
		},
		{
			"name": "üö® Error Handling",
			"item": [
				{
					"name": "Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message about API key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.include('api key');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_invalid_key_12345",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"Test with invalid key\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Test avec une cl√© API invalide"
					}
				},
				{
					"name": "Missing API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error indicates missing API key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"Test without API key\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Test sans cl√© API"
					}
				},
				{
					"name": "Invalid Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    // Could be either Laravel validation error or Kannel error",
									"    pm.expect([",
									"        jsonData.hasOwnProperty('errors'),",
									"        jsonData.hasOwnProperty('code')",
									"    ]).to.include(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"invalid_phone\",\n    \"message\": \"Test avec num√©ro invalide\",\n    \"from\": \"{{from_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Test avec un num√©ro de t√©l√©phone invalide"
					}
				},
				{
					"name": "Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation errors for required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from\": \"{{from_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Test sans les champs obligatoires (to, message)"
					}
				},
				{
					"name": "Message Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error indicates message too long\", function () {",
									"    var jsonData = pm.response.json();",
									"    // Could be validation error or Kannel error",
									"    var errorText = (jsonData.message || jsonData.error || '').toLowerCase();",
									"    pm.expect([",
									"        errorText.includes('too long'),",
									"        errorText.includes('max'),",
									"        errorText.includes('160'),",
									"        errorText.includes('length')",
									"    ]).to.include(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"Ce message est volontairement tr√®s long pour tester la validation de la longueur maximale des SMS qui est de 160 caract√®res selon les standards GSM et qui devrait d√©clencher une erreur de validation soit c√¥t√© Laravel soit c√¥t√© Kannel.\",\n    \"from\": \"{{from_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Test avec un message d√©passant 160 caract√®res"
					}
				}
			],
			"description": "Tests de gestion d'erreurs et validation"
		},
		{
			"name": "‚ö° Performance Tests",
			"item": [
				{
					"name": "Response Time - SMS Send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Response time is reasonable for sync SMS\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"    console.log(\"SMS send response time: \" + pm.response.responseTime + \"ms\");",
									"});",
									"",
									"pm.test(\"Status is success\", function () {",
									"    pm.expect([200, 202]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{test_phone}}\",\n    \"message\": \"Performance test - {{$timestamp}}\",\n    \"from\": \"{{from_number}}\",\n    \"async\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"send"
							]
						},
						"description": "Test de performance pour l'envoi de SMS"
					}
				},
				{
					"name": "Response Time - SMS List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"List endpoint performance\", function () {",
									"    console.log(\"SMS list response time: \" + pm.response.responseTime + \"ms\");",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms?per_page=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms"
							],
							"query": [
								{
									"key": "per_page",
									"value": "50"
								}
							]
						},
						"description": "Test de performance pour la liste des SMS"
					}
				},
				{
					"name": "Response Time - Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stats response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"    console.log(\"Stats response time: \" + pm.response.responseTime + \"ms\");",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/stats?period=month",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								}
							]
						},
						"description": "Test de performance pour les statistiques"
					}
				}
			],
			"description": "Tests de performance et temps de r√©ponse"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Executing request to: ' + pm.request.url);",
					"",
					"// Check if required variables are set",
					"const requiredVars = ['base_url', 'api_key'];",
					"requiredVars.forEach(function(varName) {",
					"    const value = pm.collectionVariables.get(varName);",
					"    if (!value) {",
					"        console.warn('‚ö†Ô∏è Missing required variable: ' + varName);",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global post-request script",
					"console.log('‚úÖ Response received: ' + pm.response.code + ' in ' + pm.response.responseTime + 'ms');",
					"",
					"// Log errors for debugging",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error response: ' + pm.response.text());",
					"}",
					"",
					"// Performance tracking",
					"pm.globals.set('last_response_time', pm.response.responseTime);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://sms-gateway.dj/api/v1",
			"type": "string",
			"description": "URL de base de l'API SMS Gateway"
		},
		{
			"key": "api_key",
			"value": "sk_your_api_key_32_characters_here",
			"type": "string",
			"description": "Cl√© API pour l'authentification"
		},
		{
			"key": "test_phone",
			"value": "77166677",
			"type": "string",
			"description": "Num√©ro de t√©l√©phone de test"
		},
		{
			"key": "from_number",
			"value": "11123",
			"type": "string",
			"description": "Num√©ro exp√©diteur par d√©faut"
		},
		{
			"key": "health_token",
			"value": "your_health_check_token",
			"type": "string",
			"description": "Token pour le health check"
		},
		{
			"key": "test_message",
			"value": "",
			"type": "string",
			"description": "Message de test g√©n√©r√© dynamiquement"
		},
		{
			"key": "last_sms_id",
			"value": "",
			"type": "string",
			"description": "ID du dernier SMS envoy√© (g√©n√©r√© automatiquement)"
		},
		{
			"key": "async_sms_id",
			"value": "",
			"type": "string",
			"description": "ID du SMS asynchrone (g√©n√©r√© automatiquement)"
		},
		{
			"key": "last_sms_status",
			"value": "",
			"type": "string",
			"description": "Statut du dernier SMS (g√©n√©r√© automatiquement)"
		}
	]
}