{
	"info": {
		"_postman_id": "d4f8a2b1-8c3e-4f9d-a1b2-3c4d5e6f7890",
		"name": "Bulk SMS API",
		"description": "Collection compl√®te pour l'API Bulk SMS Gateway\n\n## üîë Configuration\n\n1. **Variables d'environnement requises:**\n   - `base_url`: http://localhost:8000/api/v1\n   - `api_token`: YOUR_API_TOKEN\n   - `job_id`: ID de la campagne (sera mis √† jour automatiquement)\n\n## üì§ Fonctionnalit√©s\n\n- Cr√©er des campagnes bulk SMS\n- Surveiller le progr√®s en temps r√©el\n- Contr√¥ler les campagnes (pause/resume)\n- Lister et filtrer les campagnes\n- Tests de performance\n\n## üöÄ Guide d'utilisation\n\n1. Configurez vos variables d'environnement\n2. Commencez par \"Health Check\"\n3. Cr√©ez une campagne avec \"Create Bulk SMS\"\n4. Surveillez avec \"Get Campaign Status\"\n5. Contr√¥lez avec Pause/Resume si n√©cessaire",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üè• Health & Authentication",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is running\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('ok');",
									"    pm.expect(jsonData.service).to.include('SMS');",
									"});",
									"",
									"console.log('‚úÖ API Health Check passed');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "V√©rifier que l'API est op√©rationnelle"
					},
					"response": []
				}
			]
		},
		{
			"name": "üì§ Bulk SMS Management",
			"item": [
				{
					"name": "Create Bulk SMS Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Campaign created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.job_id).to.exist;",
									"    ",
									"    // Store job_id for other requests",
									"    pm.environment.set('job_id', jsonData.data.job_id);",
									"    ",
									"    console.log('‚úÖ Campaign created with ID:', jsonData.data.job_id);",
									"});",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    pm.expect(jsonData.data).to.have.property('valid_recipients');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Campaign {{$timestamp}}\",\n  \"recipients\": [\"77123456\", \"77987654\", \"77555333\"],\n  \"content\": \"üî• Message de test depuis Postman! Envoy√© le {{$timestamp}}\",\n  \"from\": \"TEST\",\n  \"settings\": {\n    \"rate_limit\": 30,\n    \"batch_size\": 100\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							]
						},
						"description": "Cr√©er une nouvelle campagne bulk SMS"
					},
					"response": []
				},
				{
					"name": "Create Scheduled Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Scheduled campaign created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.scheduled_at).to.exist;",
									"    ",
									"    console.log('‚úÖ Scheduled campaign created for:', jsonData.data.scheduled_at);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Scheduled Campaign {{$timestamp}}\",\n  \"recipients\": [\"77123456\", \"77987654\"],\n  \"content\": \"üìÖ Message programm√© depuis Postman!\",\n  \"from\": \"SCHED\",\n  \"scheduled_at\": \"2025-12-01T09:00:00Z\",\n  \"settings\": {\n    \"rate_limit\": 60,\n    \"batch_size\": 50\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							]
						},
						"description": "Cr√©er une campagne programm√©e pour plus tard"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Campaign Monitoring",
			"item": [
				{
					"name": "Get Campaign Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign status retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.job_id).to.exist;",
									"    ",
									"    console.log('üìä Campaign Status:', jsonData.data.status);",
									"    console.log('üìà Progress:', jsonData.data.progress_percentage + '%');",
									"    console.log('üì§ Sent:', jsonData.data.sent_count);",
									"    console.log('‚ùå Failed:', jsonData.data.failed_count);",
									"    console.log('‚è≥ Pending:', jsonData.data.pending_count);",
									"});",
									"",
									"pm.test(\"Response contains progress metrics\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('progress_percentage');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    pm.expect(jsonData.data).to.have.property('sent_count');",
									"    pm.expect(jsonData.data).to.have.property('failed_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/bulk/{{job_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk",
								"{{job_id}}"
							]
						},
						"description": "Obtenir le statut d√©taill√© d'une campagne"
					},
					"response": []
				},
				{
					"name": "List All Campaigns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaigns list retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    console.log('üìã Total campaigns:', jsonData.data.length);",
									"    if (jsonData.pagination) {",
									"        console.log('üìÑ Page:', jsonData.pagination.current_page);",
									"        console.log('üìä Total:', jsonData.pagination.total);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/bulk?per_page=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							],
							"query": [
								{
									"key": "per_page",
									"value": "20"
								}
							]
						},
						"description": "Lister toutes les campagnes"
					},
					"response": []
				},
				{
					"name": "Filter Campaigns by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered campaigns retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    console.log('üîç Filtered campaigns:', jsonData.data.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/bulk?status=processing&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							],
							"query": [
								{
									"key": "status",
									"value": "processing"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						},
						"description": "Filtrer les campagnes par statut"
					},
					"response": []
				}
			]
		},
		{
			"name": "üéõÔ∏è Campaign Control",
			"item": [
				{
					"name": "Pause Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign paused successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('paused');",
									"    ",
									"    console.log('‚è∏Ô∏è Campaign paused successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/bulk/{{job_id}}/pause",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk",
								"{{job_id}}",
								"pause"
							]
						},
						"description": "Mettre en pause une campagne en cours"
					},
					"response": []
				},
				{
					"name": "Resume Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign resumed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('resumed');",
									"    ",
									"    console.log('‚ñ∂Ô∏è Campaign resumed successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/sms/bulk/{{job_id}}/resume",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk",
								"{{job_id}}",
								"resume"
							]
						},
						"description": "Reprendre une campagne en pause"
					},
					"response": []
				}
			]
		},
		{
			"name": "üß™ Test Scenarios",
			"item": [
				{
					"name": "Large Campaign Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Large campaign accepted\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.total_count).to.be.above(99);",
									"    ",
									"    console.log('üöÄ Large campaign created with', jsonData.data.total_count, 'recipients');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Large Test Campaign {{$timestamp}}\",\n  \"recipients\": [\n    \"77100001\", \"77100002\", \"77100003\", \"77100004\", \"77100005\",\n    \"77100006\", \"77100007\", \"77100008\", \"77100009\", \"77100010\",\n    \"77100011\", \"77100012\", \"77100013\", \"77100014\", \"77100015\",\n    \"77100016\", \"77100017\", \"77100018\", \"77100019\", \"77100020\",\n    \"77200001\", \"77200002\", \"77200003\", \"77200004\", \"77200005\",\n    \"77200006\", \"77200007\", \"77200008\", \"77200009\", \"77200010\",\n    \"77200011\", \"77200012\", \"77200013\", \"77200014\", \"77200015\",\n    \"77200016\", \"77200017\", \"77200018\", \"77200019\", \"77200020\",\n    \"77300001\", \"77300002\", \"77300003\", \"77300004\", \"77300005\",\n    \"77300006\", \"77300007\", \"77300008\", \"77300009\", \"77300010\",\n    \"77300011\", \"77300012\", \"77300013\", \"77300014\", \"77300015\",\n    \"77300016\", \"77300017\", \"77300018\", \"77300019\", \"77300020\",\n    \"77400001\", \"77400002\", \"77400003\", \"77400004\", \"77400005\",\n    \"77400006\", \"77400007\", \"77400008\", \"77400009\", \"77400010\",\n    \"77400011\", \"77400012\", \"77400013\", \"77400014\", \"77400015\",\n    \"77400016\", \"77400017\", \"77400018\", \"77400019\", \"77400020\",\n    \"77500001\", \"77500002\", \"77500003\", \"77500004\", \"77500005\",\n    \"77500006\", \"77500007\", \"77500008\", \"77500009\", \"77500010\",\n    \"77500011\", \"77500012\", \"77500013\", \"77500014\", \"77500015\",\n    \"77500016\", \"77500017\", \"77500018\", \"77500019\", \"77500020\"\n  ],\n  \"content\": \"üß™ Test de performance bulk SMS avec 100 destinataires\",\n  \"from\": \"PERF\",\n  \"settings\": {\n    \"rate_limit\": 100,\n    \"batch_size\": 20\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							]
						},
						"description": "Test avec une grande campagne (100 destinataires)"
					},
					"response": []
				},
				{
					"name": "Invalid Recipients Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation error for invalid recipients\", function () {",
									"    pm.response.to.have.status(422);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('Validation failed');",
									"    ",
									"    console.log('‚úÖ Validation correctly rejected invalid recipients');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Invalid Test\",\n  \"recipients\": [\"invalid\", \"123\", \"abc\"],\n  \"content\": \"This should fail\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							]
						},
						"description": "Test de validation avec des num√©ros invalides"
					},
					"response": []
				},
				{
					"name": "Rate Limit Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Custom rate limit applied\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    console.log('‚ö° Campaign with custom rate limit created');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"High Speed Campaign {{$timestamp}}\",\n  \"recipients\": [\"77123456\", \"77987654\", \"77555333\"],\n  \"content\": \"‚ö° Message high-speed depuis Postman!\",\n  \"from\": \"SPEED\",\n  \"settings\": {\n    \"rate_limit\": 200,\n    \"batch_size\": 50\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							]
						},
						"description": "Test avec un rate limit √©lev√©"
					},
					"response": []
				}
			]
		},
		{
			"name": "üîÑ Workflow Complete",
			"item": [
				{
					"name": "Full Workflow Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This is a workflow test that combines multiple operations",
									"",
									"pm.test(\"Campaign created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    // Store job ID for subsequent requests",
									"    pm.environment.set('workflow_job_id', jsonData.data.job_id);",
									"    ",
									"    console.log('üîÑ Workflow started with job ID:', jsonData.data.job_id);",
									"});",
									"",
									"// Schedule follow-up requests",
									"setTimeout(() => {",
									"    // You can add additional workflow logic here",
									"    console.log('‚è∞ Ready for next workflow step');",
									"}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Workflow Test Campaign {{$timestamp}}\",\n  \"recipients\": [\"77123456\", \"77987654\"],\n  \"content\": \"üîÑ Message de test workflow complet!\",\n  \"from\": \"FLOW\",\n  \"settings\": {\n    \"rate_limit\": 50,\n    \"batch_size\": 25\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/sms/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sms",
								"bulk"
							]
						},
						"description": "Test de workflow complet : Cr√©er ‚Üí Surveiller ‚Üí Contr√¥ler"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Executing Bulk SMS API request...');",
					"",
					"// Ensure required variables are set",
					"if (!pm.environment.get('base_url')) {",
					"    console.warn('‚ö†Ô∏è base_url not set. Using default.');",
					"    pm.environment.set('base_url', 'http://localhost:8000/api/v1');",
					"}",
					"",
					"if (!pm.environment.get('api_token')) {",
					"    console.warn('‚ö†Ô∏è api_token not set. Please configure authentication.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('üìä Response Status:', pm.response.code);",
					"console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
					"",
					"// Common tests for all requests",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"if (pm.response.code === 200 || pm.response.code === 201) {",
					"    pm.test(\"Response has JSON content\", function () {",
					"        pm.response.to.have.jsonBody();",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000/api/v1",
			"type": "string"
		},
		{
			"key": "api_token",
			"value": "YOUR_API_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "job_id",
			"value": "",
			"type": "string"
		}
	]
}